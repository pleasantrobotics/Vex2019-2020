/* top-level */
#include "robot-config.h"
using namespace vex;

int display(){
    while(1){
    if (Brain.Battery.capacity() < 10) {
        Brain.Screen.setOrigin(125,100);
        Brain.Screen.setFont(fontType::prop40);
        Brain.Screen.print("LOW BATTERY!");
        }
    else {
        Brain.Screen.setOrigin(100,100);
        Brain.Screen.setFont(fontType::prop30);
        Brain.Screen.print("Battery percentage: ");
        Brain.Screen.print(Brain.Battery.capacity());
        }
    }
}

int drive(){
    while(1){
    LeftMotor.spin(directionType::fwd, (Controller1.Axis3.value() + Controller1.Axis1.value())/2, velocityUnits::pct);
    RightMotor.spin(directionType::rev, (Controller1.Axis4.value() - Controller1.Axis2.value())/2, velocityUnits::pct);
    LeftFrontMotor.spin(directionType::fwd, (Controller1.Axis3.value() + Controller1.Axis1.value())/2, velocityUnits::pct);
    RightFrontMotor.spin(directionType::rev, (Controller1.Axis4.value() - Controller1.Axis2.value())/2, velocityUnits::pct);
    }
}

int rumble(){
    while(1){
    if(Controller1.ButtonY.pressing() == true){
        Controller1.rumble("-");
        }
    }
}

int middlemotor(){
    while(1) {
    if(Controller1.ButtonL1.pressing() == true){
        MiddleMotor.spin(directionType::fwd, 100, velocityUnits::pct);
    }
    else if(Controller1.ButtonL2.pressing() == true){
        MiddleMotor.spin(directionType::rev, 100, velocityUnits::pct);
    }
    else {
        MiddleMotor.stop();
    }
    }
}

int main() {
    
    while(1) {
        display();
        drive();
        rumble();
        middlemotor();
        task::sleep(20);
    }
}

/**************************************************/
/*                  Robot-Config                  */
/**************************************************/

using namespace vex;

brain Brain;
motor LeftMotor = motor(PORT1, gearSetting::ratio18_1, false);
motor RightMotor = motor(PORT10, gearSetting::ratio18_1, true);
motor LeftFrontMotor = motor(PORT2, gearSetting::ratio18_1, false);
motor RightFrontMotor = motor(PORT9, gearSetting::ratio18_1, true);
motor MiddleMotor = motor(PORT5, gearSetting::ratio18_1, true);

controller Controller1 = controller();
